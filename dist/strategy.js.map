{"version":3,"sources":["../src/strategy.js"],"names":[],"mappings":"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","file":"strategy.js","sourcesContent":["/**\r\n * Validate using the validatorjs library as a strategy for react-validation-mixin\r\n *\r\n * @see https://github.com/skaterdav85/validatorjs\r\n * @see https://jurassix.gitbooks.io/docs-react-validation-mixin/content/overview/strategies.html\r\n */\r\n\r\n'use strict';\r\n\r\nvar Validator = require('validatorjs');\r\n\r\nmodule.exports = {\r\n    /**\r\n     * Used to create this.validatorTypes in a React component and to be passed to validate or validateServer\r\n     *\r\n     * @param {Object} rules List of rules as specified by validatorjs\r\n     * @param {Object} messages Optional list of custom messages as specified by validatorjs\r\n     * @param {Function} callback if specified, called to allow customisation of validator\r\n     * @returns {Object}\r\n     */\r\n    createSchema: function (rules, messages, callback) {\r\n        return {\r\n            rules: rules,\r\n            messages: messages,\r\n            callback: callback\r\n        };\r\n    },\r\n    /**\r\n     * Same as createSchema, but the rules are disabled until activateRule is called\r\n     *\r\n     * @param {Object} rules List of rules as specified by validatorjs\r\n     * @param {Object} messages Optional list of custom messages as specified by validatorjs\r\n     * @param {Function} callback if specified, called to allow customisation of validator\r\n     * @returns {Object}\r\n     */\r\n    createInactiveSchema: function (rules, messages, callback) {\r\n        var schema = this.createSchema(rules, messages, callback);\r\n        schema.activeRules = [];\r\n\r\n        return schema;\r\n    },\r\n    /**\r\n     * Active a specific rule\r\n     *\r\n     * @param {Object} schema As created by createInactiveSchema\r\n     * @param {Object} rule Name of the rule as a key in schema.rules\r\n     */\r\n    activateRule: function (schema, rule) {\r\n        if (typeof schema.activeRules !== 'undefined' && schema.activeRules.indexOf(rule) === -1) {\r\n            schema.activeRules.push(rule);\r\n        }\r\n    },\r\n    /**\r\n     * Create a validator from submitted data and a schema\r\n     *\r\n     * @param {Object} data The data submitted\r\n     * @param {Object} schema Contains rules and custom error messages\r\n     * @param {Boolean} forceActive Whether to force all rules to be active even if not activated\r\n     * @returns {Validator}\r\n     */\r\n    createValidator: function (data, schema, forceActive) {\r\n        var rules = {};\r\n\r\n        // Only add active rules to the validator if an initially inactive schema has been created.\r\n        if (typeof schema.activeRules !== 'undefined') {\r\n            // Force all rules to be active if specified\r\n            if (forceActive) {\r\n                schema.activeRules = Object.keys(schema.rules);\r\n            }\r\n\r\n            for (var i in schema.activeRules) {\r\n                var ruleName = schema.activeRules[i];\r\n\r\n                rules[ruleName] = schema.rules[ruleName];\r\n            }\r\n        } else {\r\n            rules = schema.rules;\r\n        }\r\n\r\n        var validator = new Validator(data, rules, schema.messages);\r\n\r\n        // If a callback has been specified on the schema, call it to allow customisation of the validator\r\n        if (typeof schema.callback === 'function') {\r\n            schema.callback(validator);\r\n        }\r\n\r\n        return validator;\r\n    },\r\n    /**\r\n     * Called by react-validation-mixin\r\n     *\r\n     * @param {Object} data The data submitted\r\n     * @param {Object} schema Contains rules and custom error messages\r\n     * @param {Object} options Contains name of element being validated and previous errors\r\n     * @param {Function} callback Called and passed the errors after validation\r\n     */\r\n    validate: function (data, schema, options, callback) {\r\n        // If the whole form has been submitted, then activate all rules\r\n        var forceActive = !options.key;\r\n        var validator = this.createValidator(data, schema, forceActive);\r\n\r\n        var getErrors = function () {\r\n            // If a single element is being validated, just get those errors.\r\n            // Otherwise get all of them.\r\n            if (options.key) {\r\n                options.prevErrors[options.key] = validator.errors.get(options.key);\r\n                callback(options.prevErrors);\r\n            } else {\r\n                callback(validator.errors.all());\r\n            }\r\n        };\r\n\r\n        // Run the validator asynchronously in case any async rules have been added\r\n        validator.checkAsync(getErrors, getErrors);\r\n    },\r\n    /**\r\n     * Validate server-side returning a Promise to easier handle results.\r\n     * All inactive rules will be forced to activate.\r\n     *\r\n     * @param {Object} data The data submitted\r\n     * @param {Object} schema Contains rules and custom error messages\r\n     * @returns {Promise}\r\n     */\r\n    validateServer: function (data, schema) {\r\n        var validator = this.createValidator(data, schema, true);\r\n        var Error = this.Error;\r\n\r\n        return new Promise(function (resolve, reject) {\r\n            validator.checkAsync(\r\n                function () {\r\n                    resolve();\r\n                },\r\n                function () {\r\n                    var e = new Error('A validation error occurred');\r\n                    e.errors = validator.errors.all();\r\n\r\n                    reject(e);\r\n                }\r\n            );\r\n        });\r\n    },\r\n    /**\r\n     * Error class. Created by validateServer when validation fails.\r\n     * Exists so that middleware can check it with instanceof: if (err instanceof strategy.Error)\r\n     *\r\n     * @property {Object} errors Contains the error messages by field name.\r\n     */\r\n    Error: function (message) {\r\n        this.message = message;\r\n        this.errors = {};\r\n    }\r\n};\r\n"]}